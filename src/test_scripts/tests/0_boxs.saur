[var my_box [box [block
  [var sum [lambda [a b c] [+ a b c]]]
  [var number 42]
]]]

[var obj my_box]
[assert "boxs.saur > box access method" [== 6 [obj.sum 1 2 3]]]
[assert "boxs.saur > box access member" [== 42 obj.number]]

[set obj.number 333]
[assert "boxs.saur > box access updated member" [== 333 obj.number]]


[set obj.sum [lambda [] [90]]]
[assert "boxs.saur > box access updated method" [== 90 [obj.sum]]]


[set obj.sum 333]
[assert "boxs.saur > box access member that used to be a method " [== 333 obj.sum]]


; Nested Boxes

[var outer_definition 100]
[var outer_box [box [block

   ; Definition of an inner box
   [var inner_one [box [block

      [var q 2000]

      [var inner_two [box [block
         [var x 2]
         [var y outer_definition]
         [var parent_q q]
      ]]]

      [var x 1]
      [var inner_box inner_two]  ; Instantiation of an inner_two in inner_one
   ]]]

   [var inner_box inner_one]     ; Instantiation of an inner_one in outer_box
   [var x outer_definition]      ; use of a term outside of the definition
]]]

[var box_one outer_box]

[assert "boxs.saur > box_one outer definition " [== 100 box_one.x]]
[assert "boxs.saur > box_one inner_one x " [== 1 box_one.inner_box.x]]
[assert "boxs.saur > box_one inner_one q " [== 2000 box_one.inner_box.q]]
[assert "boxs.saur > box_one inner_one inner_two x " [== 2 box_one.inner_box.inner_box.x]]
[assert "boxs.saur > box_one inner_one inner_two y " [== outer_definition box_one.inner_box.inner_box.y]]
[assert "boxs.saur > box_one inner_one inner_two parent_q " [== box_one.inner_box.q box_one.inner_box.inner_box.parent_q]]

[set outer_definition 200]
[var box_two outer_box]

; Ensure that changing outer variables doesn't mess with the definition
[assert "boxs.saur > box_one inner_one inner_two y " [!= outer_definition box_one.inner_box.inner_box.y]]
[assert "boxs.saur > box_one inner_one inner_two y " [== 100 box_one.inner_box.inner_box.y]]

