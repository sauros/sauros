[import "todo_entry.saur"]
[use "std"]
[use "io"]
[use "os"]

[var __::anonymous::todo::window::entry [box [block
    [var origin_idx 0]
    [var value ""]
]]]

[var __::anonymous::todo::window::build_pages 
[lambda [data_set max_per_screen] [block

    ; Split the entries up into screen-sized pieces
    [var pages]
    [var page]
    [var current_page 0]
    [var window_index 0]
    [iter entry data_set.entries [block
    
        [if [== current_page max_per_screen] [block
            [push pages page]
            [set current_page 0]
            [clear page]
        ]]

        [var page_entry __::anonymous::todo::window::entry]
        [set page_entry.origin_idx window_index]
        [set page_entry.value [todo::entry::encode entry]]

        [push page page_entry]

        [set current_page [+ 1 current_page]]
        [set window_index [+ 1 window_index]]
    ]]

    ; Add any extra data 
    [if [len page] [push pages page]]

    [yield pages]
]]]

[var todo__::anonymous::todo::window::show_page_window 
[lambda [page max_selection_inclusive page_number total_pages] [block
    [os.clear_screen]
    [iter entry page [putln [fmt.encode "[%] : %" [list entry.origin_idx entry.value]]]]

    [putln "Page " page_number "/" total_pages]
    [putln "Please use `n` for next page, `p` for previous, or select the id of the entry to select"]

    [var value]
    [loop [var continue_loop 1] [continue_loop] [] [block
        [var selection [io.get_string "[n] [p] [<int>]: "]]
        [std.match::item selection [list
            [std.match::pattern "n" [lambda [] [block
                    [set value "n"]
                    [set continue_loop 0]
                ]]]
            [std.match::pattern "p" [lambda [] [block
                    [set value "p"]
                    [set continue_loop 0]
                ]]]
        ] [lambda [] [block
            [if [!= 0 [len [fmt.expand selection]]]
                [try
                    [block
                        [var temp_value [as_int selection]]
                        [if [ > temp_value max_selection_inclusive] [throw "selection out of range"]]
                        [if [ < temp_value 0] [throw "selection out of range"]]
                        [set value temp_value]
                        [set continue_loop 0]
                    ]
                    [
                        putln "Invalid value: " $
                    ]
                ]
            ]
        ]]]
    ]]
    [yield value]
]]]

[var todo__::anonymous::todo::window::show_page 
[lambda [page page_number total_pages] [block
    [os.clear_screen]
    [iter entry page [putln [fmt.encode "%: %" [list entry.origin_idx entry.value]]]]

    [putln "Page " page_number "/" total_pages]
    [putln "Please use `n` for next page, `p` for previous, or `d` for done"]

    [var value]
    [loop [var continue_loop 1] [continue_loop] [] [block
        [var selection [io.get_string "[n] [p] [d]: "]]
        [std.match::item selection [list
            [std.match::pattern "n" [lambda [] [block
                    [set value "n"]
                    [set continue_loop 0]
                ]]]
            [std.match::pattern "p" [lambda [] [block
                    [set value "p"]
                    [set continue_loop 0]
                ]]]
            [std.match::pattern "d" [lambda [] [block
                    [set value "d"]
                    [set continue_loop 0]
                ]]]
        ] [lambda [] []]
        ]
    ]]
    [yield value]
]]]

[var todo::window::show [lambda [data_set max_per_screen] [block

    [var pages [__::anonymous::todo::window::build_pages data_set max_per_screen]]

    [if [== 0 [len pages]] [block 
        [putln "Nothing to show"]
        [yield nil]
    ]]

    [var current_page 0]
    [loop [] [true] [] [block
        [var x [todo__::anonymous::todo::window::show_page 
            [at current_page pages]
            [+ 1 current_page] 
            [len pages]]
        ]
        [if [seq "n" x] [block
            [set current_page [+ 1 current_page]]
            [if [== current_page [len pages]] [set current_page 0]]
        ]]
        [if [seq "p" x] [
            [if [== current_page 0] [set current_page [- [len pages] 1]] [set current_page [- current_page 1]]  ]
        ]]
        [if [seq "d" x] [block
            [yield 1]
        ]]
    ]]
]]]

[var todo::window::select_from [lambda [data_set max_per_screen] [block

    [var pages [__::anonymous::todo::window::build_pages data_set max_per_screen]]
    [var valid_selection_max [- [len data_set.entries] 1]]

    [if [== 0 [len pages]] [block 
        [putln "Nothing to select from"]
        [yield nil]
    ]]

    [var current_page 0]
    [loop [] [true] [] [block
        [var x [todo__::anonymous::todo::window::show_page_window 
            [at current_page pages] 
            valid_selection_max 
            [+ 1 current_page] 
            [len pages]]
        ]
        [if [sneq "integer" [type x]] [block
            [if [seq "n" x] [block
                [set current_page [+ 1 current_page]]
                [if [== current_page [len pages]] [set current_page 0]]
            ]]
            [if [seq "p" x] [
                [if [== current_page 0] [set current_page [- [len pages] 1]] [set current_page [- current_page 1]]  ]
            ]]
        ]
        [
            [yield x]
        ]]
    ]]
]]]