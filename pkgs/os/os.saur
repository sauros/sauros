;  Author: bosley
;  About:  An operating system interface library

;  Retrieve the current working directory
;     param: prompt <optional> - A prompt to display to the user
;
[var cwd [lambda [] [os._pkg_os_cwd_]]]

;  Get a list of a directory or directories
;  The result will be a list of lists, with each list being
;  the result of a specific ls. The first entry of each sublist
;  will be the name of the directory searched, followed by all of the 
;  items in the directory. If the given item is not a valid directory
;  the only entry for that particular list will be a nil cell
;
[var ls [lambda [dir] [os._pkg_os_ls_ dir]]]

;  Change the current working directory
;  Returns true iff the given dir exists and
;  changing to the directory was a success
;
[var chdir [lambda [dir] [os._pkg_os_chdir_ dir]]]

;  Retrieve a string describing the endianess of the system
;     returns : big, little, or mixed 
;
[var endian [lambda [] [os._pkg_os_endian_]]]

;  Retrieve a string describing the os name
;     returns windows-32, windows-64, mac, linux, free-bsd,
;             unix, or unknown
;
[var os_name [lambda [] [os._pkg_os_os_name_]]]

;  Checks if a given string is a file
;  returns true iff the item exists as a file
;
[var is_file [lambda [x] [os._pkg_os_is_file_ x]]]

;  Checks if a given string is a dir
;  returns true iff the item exists as a dir
;
[var is_dir [lambda [x] [os._pkg_os_is_dir_ x]]]

;  Checks if a given string is a file or dir
;  returns true iff the item exists as a file or dir
;
[var exists [lambda [x] [os._pkg_os_exists_ x]]]

;  Make a directory or series of directories
;  - Makes a single direcory if given a string,
;     makes multiple if given a list of strings
;  The result will be a list of lists, with each list being
;  the result of the command. The first entry of each sublist
;  will be the name of the target, followed by the result of
;  its execution (1 success, 0 fail)
;
[var mkdir [lambda [x] [os._pkg_os_mkdir_ x]]]

;  Delete a directory or series of directories
;  - Deletes a single direcory if given a string,
;     deletes multiple if given a list of strings
;  The result will be a list of lists, with each list being
;  the result of the command. The first entry of each sublist
;  will be the name of the target, followed by the result of
;  its execution (1 success, 0 fail)
;
;  Note: If the target item is a directory and it is not emtpy,
;     the deletion will fail
;
[var delete [lambda [x] [os._pkg_os_delete_ x]]]

;  Delete a directory or series of directories
;  - Deletes a single direcory if given a string,
;     deletes multiple if given a list of strings
;  The result will be a list of lists, with each list being
;  the result of the command. The first entry of each sublist
;  will be the name of the target, followed by the result of
;  its execution (1 success, 0 fail)
;
;  Note: Removes items recursively so non-empty directories will
;        be fully removed
;
[var delete_all [lambda [x] [os._pkg_os_delete_all_ x]]]

;  Copy an item from source to destination
;  If the source doesn't exist `false` will be returned
;  source and destination are expected to be strings
;
[var copy [lambda [source destination] [os._pkg_os_copy_ source destination]]]

;  Append a string or list of strings to a given file
;   - Creates the file if it doesn't exist
;
[var file_append [lambda [file data] [os._pkg_os_file_append_ file data]]]

;  Overwrite a file with a string or list of strings
;   - Creates the file if it doesn't exist
;
[var file_write [lambda [file data] [os._pkg_os_file_write_ file data]]]

;  Reads in an entire file line by line into a list.
;  Each line is a new entry in the returned list
;
[var file_read [lambda [file] [os._pkg_os_file_read_ file]]]

;  Clear the screen
;
[var clear_screen [lambda [] [os._pkg_os_clear_screen_]]]

;  Get an environment variable
;
[var get_env [lambda [variable] [os._pkg_os_get_env_ variable]]]

;  Sleep for a specific number of milliseconds
;
[var sleep_ms [lambda [time] [os._pkg_os_sleep_ms_ time]]]
