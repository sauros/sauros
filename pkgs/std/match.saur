;  Author: Bosley
;  About:  This file provides a "match/pattern" structure that allows
;          easy string matching.
;
;  Example usage:
;
;           [var x "c"]
;           [std.match::item [x] [list
;              [std.match::pattern "a" [lambda [] [putln "got a"]]] 
;              [std.match::pattern "b" [lambda [] [putln "got b"]]] 
;              [std.match::pattern "c" [lambda [] [putln "got c"]]]
;           ] [lambda [] [
;              putln "default reached"
;           ]]]

;  An entry that ties a pattern to a
;  lambda to be executed upon match
[var __::match::pattern::entry [box [block
   [var pattern]
   [var body]
]]]

;  The match itsself is just a lambda that takes in 
;  the pattern to match, a list of entries and a default
;  lambda that gets called if no matches are found
[var match::item [lambda [item patterns default] [block
   [if [not [seq "list" [type patterns]]] [
      [throw "Expected patterns parameter to be a list of match::patterns"]
   ]]
   [if [not [seq "lambda" [type default]]] [
      [throw "Expected default parameter to be a lambda"]
   ]]
   [var stringed_item [as_str item]]
   [iter current_entry patterns [block
      [if [seq stringed_item current_entry.pattern] [block 
         [var target current_entry.body]
         [yield [target]]
      ]]
   ]]
   [yield [default]]
]]]

;  Create an entry that ties a pattern to a 
;  lambda that will be executed on a match
[var match::pattern [lambda [pattern body] [block
   [if [not [seq "string" [type pattern]]] [
      [throw "Expected pattern parameter to be a string"]
   ]]
   [if [not [seq "lambda" [type body]]] [
      [throw "Expected body parameter to be a lambda"]
   ]]
   [var new_pattern std.__::match::pattern::entry]
   [set new_pattern.pattern pattern]
   [set new_pattern.body body]
   [new_pattern]
]]]
