[use "todo_entry.saur"]

[use "os"]

[box todo_data [block
    [var disk_path ""]
    [var entries]
]]

[var todo_data::new [lambda [file entries] [block
    [var x todo_data]
    [set x.disk_path file]
    [set x.entries entries]
    [yield x]
]]]

[var todo::data::load [lambda [file] [block

    ; If we don't have a file yet then we make one
    ; and hand back a blank struct
    [if [not [os.is_file file]] [block
        [putln "Creating new file: " file]
        [os.file_write file ""]
        [yield [todo_data::new file [list ]]]
    ]]

    [var file_data [os.file_read file]]

    [var data_set]
    [iter line file_data [block
        [push data_set [todo::entry::decode line]]
    ]]

    [yield [todo_data::new file data_set]]
]]]

[var todo::data::save [lambda [data_set] [block
    ; Encode all entries and store to a list
    [var encoded_list]
    [iter entry data_set.entries [block
        [push encoded_list [fmt.encode "%\n" [todo::entry::encode entry]]]
    ]]

    ; Join that list and dump to file
    [os.file_write data_set.disk_path [fmt.join encoded_list]]
]]]

[var todo::data::dump [lambda [data_set] [block
    [iter entry data_set.entries [block
        [putln [fmt.encode "%\n" [todo::entry::encode entry]]]
    ]]
]]]