
; Everything out here is a "global" scope

[var a 4]

[var fn [lambda [x] [block

    ; Everything in here can access the "global" scope
    [putln "global value (a): " a]

    ; But it also has its own so at the end of the function
    ; the environment in here is freed

    ; In typical languages everything in the global scope 
    ; prior to the definition of this function would be reachable
    ; while everything after in the global scope would be not reachable

    ; However, in sauros, everyting before the point of call to a function
    ; is accessable. This is beacuse the environment for the function is
    ; created at the moment it is called with whatever the current global
    ; environment contains. 
    [putln "global value defined after lambda, but before call (b): " b]

    ; In a threaded scenario this gets weird. 

    ; As a rule, don't rely on anything after the definition for 
    ; single threaded things, and for threaded things only do that
    ; but also ensure that everything is done via a channel `chan`
    ; to ensure things don't get wack

    ; Also note: lambda parameters are copied by value, so changing them
    ; within the function will not modify them externally
    [set x 100]
    [putln "copied parameter (x) set to: " x]
]]]

[var b 22]

[var c 0]

[fn c]

[putln "item sent to lambda (c) is still: " c]